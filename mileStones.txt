MILESTONE 1

    History of JS
    ECMA Script
    How javascript and ECMA are related.
    DOM and Browser Object Model

MILESTONE 2
    Case-sensitivity
    Identifiers
    Comments
    Strict Mode
    Statements
    Keywords and reserved words
    Variable
    The typeof Operator 
    undefined
    null 
    boolean 
    number 
    string 
    object types
    arrays

MILESTONE 3

    Operators
    Unary Operators
    Bitwise Operators
    Boolean Operators
    Multiplicative Operators 
    Additive Operators 
    Relational Operators 
    Equality Operators 
    Conditional Operator 
    Assignment Operators 
    Comma Operator 

MILESTONE 4
  Statements
        The if Statement 
        The do-while Statement 
        The while Statement 
        The for Statement 
        The for-in Statement 
        Labeled Statements 
        The break and continue Statements 
        The with Statement 
        The switch Statement 



MILESTONE 5

    functions 
    overloading in JS
    arguments/parameters
    nornalfunction vs arrow functions
    generator functions
    asynchronous

MILESTONE 6
    Primitive and Reference Values
        Dynamic Properties
        Copying Values
        Argument Passing
        Determining Type
        
    Execution Context and Scope
        Scope Chain Augmentation
        No Block-Level Scopes 

MILESTONE 7

    Garbage Collection
        Mark-and-Sweep
        Reference Counting
        Performance
        Managing Memory 



MILESTONE 8

FUNCTION EXPRESSIONS 
    Recursion 
    Closures 
            Closures and Variables
            prototype 
            The this Object 
            Memory Leaks 
    Mimicking Block Scope 
    class
    class-Private
    class-static
    Private Variables 
            Static Private Variables 
            The Module Pattern
            The Module-Augmentation Pattern 


MILESTONE 9

OBJECT-ORIENTED PROGRAMMING

    Understanding Objects
    Types of Properties
    Defining Multiple Properties
    Reading Property Attributes
    Object Creation

    The Factory Pattern
    The Constructor Pattern
    The Prototype Pattern
    Combination Constructor/Prototype Pattern
    Dynamic Prototype Pattern
    Parasitic Constructor Pattern
    Durable Constructor Pattern
    
    Inheritance
    Prototype Chaining
    Constructor Stealing
    Combination Inheritance
    Prototypal Inheritance
    Parasitic Inheritance
    Parasitic Combination Inheritance














Types of Recursion
    Recursion are mainly of two types depending on whether a function calls itself from within itself or more than one function call one another mutually. 
    The first one is called direct recursion and another one is called indirect recursion. 

    1. Direct Recursion: These can be further categorized into four types:
        i) Tail Recursion: If a recursive function calling itself and that recursive call is the last statement in the function then it’s known as Tail Recursion.
        After that call the recursive function performs nothing. The function has to process or perform any operation at the time of calling and it does nothing at returning time.
        
        Example:
        const fun = function (n){
                if (n > 0)
                {
                console.log(n)
            
                // Last statement in the function
                fun(n - 1);
                }
            }
        
       
        
        const x = 3;
        fun(x);//3 2 1

        ii) Head Recursion: If a recursive function calling itself and that recursive call is the first statement in the function then it’s known as Head Recursion.
        There’s no statement, no operation before the call. The function doesn’t have to process or perform any operation at the time of calling and all operations are done at returning time.
        
        Example:
        const fun = function (n){
                if (n > 0)
                {
                // first statement in the function
                fun(n - 1);
                console.log(n)
            
                }
            }
        
       
        
        const x = 3;
        fun(x);//1 2 3

        iii) Tree Recursion: To understand Tree Recursion let’s first understand Linear Recursion.
        If a recursive function calling itself for one time then it’s known as Linear Recursion.
        Otherwise if a recursive function calling itself for more than one time then it’s known as Tree Recursion.
    
        Example
        const fun = function (n){
            if (n > 0) {
                console.log(" "+ n);
        
                // Calling once
                fun(n - 1);
        
                // Calling twice
                fun(n - 1);
            }
        }
        
        // Driver code
        fun(3);//3 2 1 1 2 1 1

        iv) Nested Recursion: In this recursion, a recursive function will pass the parameter as a recursive call.
        That means “recursion inside recursion”. Let see the example to understand this recursion.

        Example:

        const fun = function ( n){

            if (n > 100)
                return n - 10;
        
            // A recursive function passing parameter
            // as a recursive call or recursion
            // inside the recursion
            return fun(fun(n + 11));
        }
        
        // Driver code
        let r;
        r = fun(95);
        console.log("  "+ r); //91
    2. Indirect Recursion: In this recursion, there may be more than one functions and they are calling one another in a circular manner.

        Example:

        const funA = function (n){
            if (n > 0) {
                console.log(n.toFixed(0) );
        
                // Fun(A) is calling fun(B)
                funB(n - 1);
            }
        }
        
        function funB(n)
        {
            if (n > 1) {
                console.log(n.toFixed(0) );
        
                // Fun(B) is calling fun(A)
                funA(n / 2);
            }
        }
 
        // Driver code
        funA(20); //20 19 9 8 4 3 1
