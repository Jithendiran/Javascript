What are memory leaks?
In essence, memory leaks can be defined as memory that is not required by an application anymore that for some reason is not returned to the operating system or the pool of free memory.
Programming languages favor different ways of managing memory. These ways may reduce the chance of leaking memory. However, whether a certain piece of memory is unused or not is actually an undecidable problem. 
In other words, only developers can make it clear whether a piece of memory can be returned to the operating system or not. Certain programming languages provide features that help developers do this.
Others expect developers to be completely explicit about when a piece of memory is unused. Wikipedia has good articles on manual and automatic memory management.

The Three Types of Common JavaScript Leaks

1: Accidental global variables

    function foo(arg) {
    bar = "this is a hidden global variable"; or  window.bar = "this is an explicit global variable" or this.bar = "ksvbn"

    }

2: Forgotten timers or callbacks

    bar is a global even if the function returned it still there in the memory

    var someResource = getData();
    setInterval(function() {
    var node = document.getElementById('Node');
    if(node) {
        // Do stuff with node and someResource.
        node.innerHTML = JSON.stringify(someResource));
    }
    }, 1000);

    This example illustrates what can happen with dangling timers: timers that make reference to nodes or data that is no longer required. The object represented by node may be removed in the future, 
    making the whole block inside the interval handler unnecessary. However, the handler, as the interval is still active, cannot be collected (the interval needs to be stopped for that to happen).
    If the interval handler cannot be collected, its dependencies cannot be collected either. 
    That means that someResource, which presumably stores sizable data, cannot be collected either.

3: Out of DOM references

    var elements = {
        button: document.getElementById('button'),
        image: document.getElementById('image'),
        text: document.getElementById('text')
    };

    function doStuff() {
        image.src = 'http://some.url/image';
        button.click();
        console.log(text.innerHTML);
        // Much more logic
    }

    function removeButton() {
        // The button is a direct child of body.
        document.body.removeChild(document.getElementById('button'));

        // At this point, we still have a reference to #button in the global
        // elements dictionary. In other words, the button element is still in
        // memory and cannot be collected by the GC.
    }

4: Closures
    A key aspect of JavaScript development are closures: anonymous functions that capture variables from parent scopes. Meteor developers found a particular case in which due to implementation details of the JavaScript runtime, it is possible to leak memory in a subtle way:

    var theThing = null;
    var replaceThing = function () {
    var originalThing = theThing;
    var unused = function () {
        if (originalThing)
        console.log("hi");
    };
    theThing = {
        longStr: new Array(1000000).join('*'),
        someMethod: function () {
        console.log(someMessage);
        }
    };
    };
    setInterval(replaceThing, 1000);
    This snippet does one thing: every time replaceThing is called, theThing gets a new object which contains a big array and a new closure (someMethod).
    At the same time, the variable unused holds a closure that has a reference to originalThing (theThing from the previous call to replaceThing).
    Already somewhat confusing, huh? The important thing is that once a scope is created for closures that are in the same parent scope, that scope is shared.
    In this case, the scope created for the closure someMethod is shared by unused. unused has a reference to originalThing. Even though unused is never used, someMethod can be used through theThing.
    And as someMethod shares the closure scope with unused, even though unused is never used, its reference to originalThing forces it to stay active (prevents its collection).
    When this snippet is run repeatedly a steady increase in memory usage can be observed. This does not get smaller when the GC runs. In essence, a linked list of closures is created (with its root in the form of the theThing variable),
    and each of these closures' scopes carries an indirect reference to the big array, resulting in a sizable leak.

